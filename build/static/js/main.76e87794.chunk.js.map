{"version":3,"sources":["components/signUp.js","pages/registration.js","components/signIn.js","pages/auth.js","components/row.js","components/userTable.js","pages/users.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","SignUp","username","password","email","onChange","onSend","classes","Container","component","maxWidth","CssBaseline","className","Avatar","Typography","variant","noValidate","Grid","container","item","xs","TextField","value","autoComplete","name","required","fullWidth","id","label","autoFocus","type","Button","color","onClick","withRouter","history","useState","setUsername","setPassword","setEmail","useCookies","setCookies","event","target","console","error","fetch","method","headers","body","JSON","stringify","then","response","ok","json","user","push","registrate","textDecoration","SignIn","to","Row","userID","registrationDate","lastLoginDate","isActive","selected","TableRow","hover","TableCell","Checkbox","checked","Date","toDateString","UserTable","users","selectedUsers","onBlock","onUnblock","onDelete","toggleSelect","allSelect","toggleAllSelect","ButtonGroup","Table","TableHead","TableBody","map","element","key","generateRow","setSelected","setAllSelect","setUsers","cookies","removeCookie","reqUsers","useCallback","onClickAction","actionType","sendUsers","i","length","action","redirect","log","useEffect","buffer","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.76e87794.chunk.js","sourcesContent":["import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(3),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nconst SignUp = ({\n    username,\n    password,\n    email,\n    onChange, \n    onSend,\n}) => {\n    const classes = useStyles();\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign Up\n                </Typography>\n                <form className={classes.form} noValidate>\n                    <Grid container spacing={2}>\n                        <Grid item xs={12}>\n                            <TextField\n                                value={username}\n                                onChange={onChange}\n                                autoComplete=\"username\"\n                                name=\"username\"\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"username\"\n                                label=\"User name\"\n                                autoFocus\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                value={email}\n                                onChange={onChange}\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email\"\n                                name=\"email\"\n                                autoComplete=\"email\"\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                value={password}\n                                onChange={onChange}\n                                variant=\"outlined\"\n                                required\n                                fullWidth\n                                name=\"password\"\n                                label=\"Password\"\n                                type=\"password\"\n                                id=\"password\"\n                                autoComplete=\"current-password\"\n                            />\n                        </Grid>\n                    </Grid>\n                    <Button\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                        onClick={onSend}\n                    >\n                        Sign Up\n                    </Button>\n                </form>\n            </div>\n        </Container>\n    );\n}\n\nexport default SignUp;","import React, { useState } from 'react';\nimport SignUp from '../components/signUp';\nimport { useCookies } from 'react-cookie';\nimport { withRouter } from 'react-router-dom';\n\nconst Registration = ({ history }) => {\n    const [ username, setUsername ] = useState('');\n    const [ password, setPassword ] = useState('');\n    const [ email, setEmail ] = useState('');\n    const [ cookies, setCookies ] = useCookies(['user']);\n\n    return (\n        <SignUp\n            username={username}\n            password={password}\n            email={email}\n            onChange={(event) => {\n                let value = event.target.value;\n                switch(event.target.name) {\n                    case 'username':\n                        setUsername(value);\n                        break;\n                    case 'password':\n                        setPassword(value);\n                        break;\n                    case 'email':\n                        setEmail(value);\n                        break;\n                    default: \n                        console.error('Wront event target name '+event.target.name);\n                }\n            }}\n            onSend={() => {\n                fetch('/api/newUser', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json;charset=utf-8',\n                    },\n                    body: JSON.stringify({\n                        username: username,\n                        password: password,\n                        email: email,\n                    }),\n                }).then(response => {\n                    if(response.ok) {\n                        response.json().then(value => {\n                                setCookies('user', value.user);\n                                history.push('/users')\n                            }\n                        );\n                    }\n                })\n            }}\n        />\n    );\n}\n\nexport default withRouter(Registration);","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    registrate: {\n        textDecoration: 'none',\n        marginTop: '0.5em',\n    }\n}));\n\nconst SignIn = (\n    {\n        username,\n        password,\n        onChange,\n        onSend,\n    }\n) => {\n    const classes = useStyles();\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Sign In\n                </Typography>\n                <form className={classes.form} noValidate>\n                    <TextField\n                        value={username}\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"username\"\n                        label=\"User name\"\n                        name=\"username\"\n                        autoComplete=\"username\"\n                        autoFocus\n                        onChange={onChange}\n                    />\n                    <TextField\n                        value={password}\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                        onChange={onChange}\n                    />\n                    <Button\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                        onClick={onSend}\n                    >\n                        Sign In\n                    </Button>\n                </form>\n                <Link className={classes.registrate} to='/registration'>\n                    Registrate new user\n                </Link>\n            </div>\n        </Container>\n    );\n}\n\nexport default SignIn;","import React, { useState } from 'react';\nimport SignIn from '../components/signIn';\nimport { useCookies } from 'react-cookie';\nimport { withRouter } from 'react-router-dom';\n\nconst Auth = ({ history }) => {\n    const [ username, setUsername ] = useState('');\n    const [ password, setPassword ] = useState('');\n    const [ cookies, setCookies ] = useCookies(['user']);\n\n    return (\n        <SignIn \n            username={username}\n            password={password}\n            onChange={(event) => {\n                switch(event.target.name) {\n                    case 'username':\n                        setUsername(event.target.value);\n                        break;\n                    case 'password':\n                        setPassword(event.target.value);\n                        break;\n                    default:\n                        console.error('Wrong event target name '+event.target.name)\n                }\n            }}\n            onSend={() => {\n                fetch('/api/login', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json;charset=utf-8',\n                    },\n                    body: JSON.stringify({\n                        username: username,\n                        password: password,\n                    }),\n                }).then((response) => {\n                    if(response.ok) {\n                        response.json().then(\n                            (value) => {\n                                setCookies('user', value.user);\n                                history.push('/users');\n                            }\n                        )\n                    }\n                });\n            }}\n        />\n    )\n}\n\nexport default withRouter(Auth);","import React from 'react';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst Row = (\n    {\n        userID,\n        username,\n        email,\n        registrationDate,\n        lastLoginDate,\n        isActive,\n        selected,\n        onChange,\n    }\n) => {\n    return(\n        <TableRow\n            hover\n            onClick={onChange}\n        >\n            <TableCell>\n                \n                <Checkbox\n                    onChange={onChange}\n                    checked={!!selected}\n                />\n            </TableCell>\n            <TableCell>\n                {userID}\n            </TableCell>\n            <TableCell>\n                {username}\n            </TableCell>\n            <TableCell>\n                {email}\n            </TableCell>\n            <TableCell>\n                {(new Date(registrationDate)).toDateString()}\n            </TableCell>\n            <TableCell>\n                {(new Date(lastLoginDate)).toDateString()}\n            </TableCell>\n            <TableCell>\n                {isActive ? 'Active':'Blocked'}\n            </TableCell>\n        </TableRow>\n)}\n\nexport default Row;","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button'\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Row from './row';\n\nfunction generateRow({\n    id,\n    username,\n    email,\n    registrationDate,\n    lastLoginDate,\n    isActive,\n    selected,\n    onChange,\n}) {\n    return (\n        <Row \n            key={id}\n            userID={id}\n            username={username}\n            email={email}\n            registrationDate={registrationDate}\n            lastLoginDate={lastLoginDate}\n            isActive={isActive}\n            selected={selected} \n            onChange={onChange}\n        />\n    );\n}\n\nconst UserTable = (\n    {\n        users,\n        selectedUsers,\n        onBlock,\n        onUnblock,\n        onDelete,\n        toggleSelect,\n        allSelect,\n        toggleAllSelect,\n    }\n) => {\n    return (\n        <Container maxWidth='md'>\n            <ButtonGroup fullWidth>\n                <Button onClick={onBlock}>Block</Button>\n                <Button onClick={onUnblock}>Unblock</Button>\n                <Button onClick={onDelete}>Delete</Button>\n            </ButtonGroup>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            <Checkbox\n                                checked={allSelect}\n                                onChange={toggleAllSelect}\n                            />\n                        </TableCell>\n                        <TableCell>\n                            ID\n                        </TableCell>\n                        <TableCell>\n                            Username\n                        </TableCell>\n                        <TableCell>\n                            Email\n                        </TableCell>\n                        <TableCell>\n                            Registration date\n                        </TableCell>\n                        <TableCell>\n                            Last login date\n                        </TableCell>\n                        <TableCell>\n                            Status\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {users.map((element)=> {\n                        return generateRow({\n                            selected: selectedUsers[element.id], \n                            onChange: () => {\n                                toggleSelect(element.id)\n                            },\n                            ...element})\n                    })}\n                </TableBody>\n            </Table>\n        </Container>\n    )\n}\n\nexport default UserTable;","import React, { useState, useEffect, useCallback } from 'react';\nimport UserTable from '../components/userTable';\nimport { useCookies } from 'react-cookie'\nimport { withRouter } from 'react-router-dom';\n\nconst Users = ({history}) => {\n    const [selected, setSelected] = useState({});\n    const [allSelect, setAllSelect] = useState(false);\n    const [users, setUsers] = useState([]);\n    const [cookies, setCookie, removeCookie] = useCookies(['user']);\n\n    const reqUsers = useCallback(\n        () => {\n            fetch('/api/users').then((response => {\n                if (response.ok) {\n                    response.json().then(value => {\n                        setUsers(value);\n                    });\n                }\n            }))\n        }, []\n    );\n    const onClickAction = useCallback(\n        (actionType = 'block') => {\n            let sendUsers = [];\n            for(let i=0; i<users.length; i++) {\n                if(selected[users[i].id]) {\n                    sendUsers = [...sendUsers, users[i].id];\n                }\n            }\n            return fetch(\n                '/api/users',\n                {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json;charset=utf-8',\n                    },\n                    body: JSON.stringify({\n                        action: actionType,\n                        user: cookies.user,\n                        users: sendUsers,\n                    })\n                },\n            );\n        }, [cookies.user, selected, users]\n    );\n    const redirect = useCallback(\n        (selected, response) => {\n            let action = () => {\n                removeCookie('user');\n                history.push('/');\n            }\n            console.log(selected);\n            if (response.ok) {\n                if(selected[cookies.user]) {\n                    action();\n                }\n            } else {\n                action();\n            }\n        }, [history, cookies.user, removeCookie]\n    );\n\n    useEffect(() => {\n        reqUsers();\n    }, [reqUsers]);\n\n    return (\n        <UserTable \n            users={users}\n            selectedUsers={selected}\n            toggleSelect={(id) => {\n                let buffer = {...selected};\n                buffer[id] = !buffer[id];\n                setAllSelect(false);\n                setSelected(buffer);\n            }}\n            allSelect={allSelect}\n            toggleAllSelect={\n                () => {\n                    let selectedUsers = {};\n                    if(!allSelect) {\n                        for(let i=0; i<users.length; i++) {\n                            selectedUsers[users[i].id]=true;\n                        }\n                    } \n                    setSelected(selectedUsers);\n                    setAllSelect(!allSelect);\n                }\n            }\n            onBlock={() => {\n                console.log('block');\n                onClickAction('block').then(\n                    (response) => {\n                        redirect(selected, response);\n                        reqUsers();\n                    });\n            }}\n            onUnblock={() => {\n                onClickAction('unblock').then((response) => {\n                    redirect([], response);\n                    reqUsers();\n                })\n            }}\n            onDelete={() => {\n                onClickAction('delete').then(\n                    (response) => {\n                        redirect(selected, response);\n                        reqUsers();\n                    }\n                )\n            }}\n        />\n    );\n}\n\nexport default withRouter(Users);","import React from 'react';\nimport Registration from './pages/registration';\nimport Auth from './pages/auth';\nimport Users from './pages/users'\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\nimport { useCookies } from 'react-cookie';\nimport './App.css';\n\nfunction App() {\n  const [ cookies, setCookies, removeCookies ] = useCookies(['user']);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path='/users'>\n            <Users />\n          </Route>\n          <Route path='/registration'>\n            <Registration />\n          </Route>\n          <Route path='/auth'>\n            <Auth />\n          </Route>\n          <Route path='/'>\n            <Redirect to={cookies.user ? '/users' : '/auth'}/>\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}